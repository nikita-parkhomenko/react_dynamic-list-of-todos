{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","postId","filterTitle","select","buttonClickHandler","userId","setState","props","onSelectUser","selectChangeHandler","event","target","value","onInputHandler","todos","this","filter","todo","completed","title","toLowerCase","includes","className","onChange","map","key","id","cn","type","checked","readOnly","onClick","Component","BASE_URL","getUser","fetch","then","resp","json","data","CurrentUser","user","prevProps","name","email","phone","clearUser","App","selectedUserId","selectUser","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c08b1ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport class TodoList extends Component {\n  state = {\n    postId: 0,\n    filterTitle: '',\n    select: 'all',\n  };\n\n  buttonClickHandler = (postId, userId) => {\n    this.setState({ postId });\n\n    this.props.onSelectUser(userId);\n  }\n\n  selectChangeHandler = (event) => {\n    this.setState({ select: event.target.value });\n  }\n\n  onInputHandler = (event) => {\n    this.setState({ filterTitle: event.target.value });\n  }\n\n  render() {\n    let { todos } = this.props;\n    const { postId, filterTitle, select } = this.state;\n\n    if (select !== 'all') {\n      select === 'active'\n        ? todos = todos.filter(todo => todo.completed === false)\n        : todos = todos.filter(todo => todo.completed === true);\n    }\n\n    if (filterTitle) {\n      todos = todos\n        .filter(({ title }) => title !== null\n          && title.toLowerCase().includes(filterTitle.toLowerCase()));\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <form>\n            <label className=\"TodoList__label\">\n              Todo filter:\n              <input\n                onChange={event => this.onInputHandler(event)}\n                className=\"TodoList__filter\"\n              />\n            </label>\n\n            <label className=\"TodoList__label\">\n              Filter by status:\n              <select\n                className=\"TodoList__select\"\n                onChange={event => this.selectChangeHandler(event)}\n              >\n                <option value=\"all\">Show all</option>\n                <option value=\"active\">Show active</option>\n                <option value=\"completed\">Show completed</option>\n              </select>\n            </label>\n          </form>\n          <ul className=\"TodoList__list\">\n\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={cn('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  onClick={() => this.buttonClickHandler(todo.id, todo.userId)}\n                  className={cn('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected': todo.id === postId,\n                  })}\n                  type=\"button\"\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  onSelectUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","/* eslint-disable arrow-body-style */\nconst BASE_URL = 'https://mate-api.herokuapp.com';\n\n// eslint-disable-next-line arrow-body-style\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(resp => resp.json())\n    .then(resp => resp.data);\n};\n\nexport const getUser = (id) => {\n  return fetch(`${BASE_URL}/users/${id}`)\n    .then(resp => resp.json())\n    .then(resp => resp.data);\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    getUser(userId)\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <p>Loading...</p>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"CurrentUser__clear\"\n          type=\"button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({\n        todos,\n      }));\n  }\n\n  selectUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}